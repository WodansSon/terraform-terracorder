name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]

env:
  POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions-CI

jobs:
  test:
    name: Test PowerShell Script
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        powershell-version: [7.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Verify PowerShell Version
      shell: pwsh
      run: |
        Write-Host "Using PowerShell Core"
        $PSVersionTable

    - name: Validate PowerShell Syntax
      shell: pwsh
      run: |
        Write-Host "Validating PowerShell syntax..."
        $scriptPath = "./scripts/terracorder.ps1"

        # Parse the script to check for syntax errors
        $parseErrors = $null
        $parseResult = [System.Management.Automation.PSParser]::Tokenize((Get-Content $scriptPath -Raw), [ref]$parseErrors)

        if ($parseErrors.Count -gt 0) {
          Write-Error "Syntax errors found in $scriptPath"
          $parseErrors | ForEach-Object { Write-Error $_.Message }
          exit 1
        }

        Write-Host "PowerShell syntax validation passed"

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Installing PSScriptAnalyzer..."
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

        Write-Host "Running PSScriptAnalyzer..."
        $results = Invoke-ScriptAnalyzer -Path "./scripts/terracorder.ps1" -Severity Warning,Error

        if ($results.Count -gt 0) {
          Write-Host "PSScriptAnalyzer findings:" -ForegroundColor Yellow
          $results | ForEach-Object {
            Write-Host "  $($_.Severity): $($_.Message) at line $($_.Line)" -ForegroundColor Yellow
          }

          # Fail on errors, warn on warnings
          $errors = $results | Where-Object { $_.Severity -eq 'Error' }
          if ($errors.Count -gt 0) {
            Write-Error "PSScriptAnalyzer found $($errors.Count) error(s)"
            exit 1
          }
        }

        Write-Host "PSScriptAnalyzer validation passed"

    - name: Test Script Execution
      shell: pwsh
      run: |
        Write-Host "Testing script execution..."

        # Test help parameter
        $helpOutput = & "./scripts/terracorder.ps1" -Help 2>&1
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Help parameter test failed"
          Write-Host "Output: $helpOutput"
          exit 1
        }

        Write-Host "Script execution tests passed"

    - name: Create Test Results
      if: always()
      shell: pwsh
      run: |
        $testResults = @{
          OS = "${{ matrix.os }}"
          PowerShellVersion = "${{ matrix.powershell-version }}"
          Status = if ($?) { "Passed" } else { "Failed" }
          Timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
        }

        $testResults | ConvertTo-Json | Out-File -FilePath "test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}.json"

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.powershell-version }}
        path: test-results-*.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript  # CodeQL treats PowerShell as similar to JS for analysis
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract Version from Tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create Release Archive
      run: |
        mkdir -p release/scripts
        mkdir -p release/modules
        mkdir -p release/tools/replicode

        # Copy main script
        cp scripts/terracorder.ps1 release/scripts/

        # Copy all required modules
        cp modules/Database.psm1 release/modules/
        cp modules/DatabaseMode.psm1 release/modules/
        cp modules/FileDiscovery.psm1 release/modules/
        cp modules/ASTImport.psm1 release/modules/
        cp modules/Prerequisites.psm1 release/modules/
        cp modules/UI.psm1 release/modules/

        # Copy Replicode binaries
        cp tools/replicode/replicode release/tools/replicode/
        cp tools/replicode/replicode.exe release/tools/replicode/

        # Copy documentation
        cp README.md release/
        cp LICENSE release/
        cp CHANGELOG.md release/
        cp docs/DATABASE_SCHEMA.md release/ 2>/dev/null || true

        # Create Linux/macOS archive (includes Linux binary)
        tar -czf terracorder-${{ steps.version.outputs.version }}-linux.tar.gz -C release .

        # Create Windows archive (includes Windows binary)
        cd release && zip -r ../terracorder-${{ steps.version.outputs.version }}-windows.zip . && cd ..

    - name: Generate Release Notes from CHANGELOG
      id: release_notes
      run: |
        VERSION=${{ steps.version.outputs.version }}

        # Extract release notes from CHANGELOG.md
        awk '/^## \['$VERSION'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > changelog_extract.md

        # Create release notes with installation instructions
        cat > release_notes.md << 'EOF'
        ## TerraCorder v${{ steps.version.outputs.version }}

        EOF

        # Append extracted CHANGELOG content
        cat changelog_extract.md >> release_notes.md

        # Append installation and usage instructions
        cat >> release_notes.md << 'EOF'

        ---

        ### Installation
        ```powershell
        # Download and run
        Invoke-WebRequest -Uri "https://github.com/WodansSon/terraform-terracorder/releases/download/v${{ steps.version.outputs.version }}/terracorder.ps1" -OutFile "terracorder.ps1"
        ```

        ### Platform Support
        - Windows (PowerShell Core 7.x+)
        - Linux (PowerShell Core 7.x+)
        - macOS (PowerShell Core 7.x+)

        ### Usage
        ```powershell
        .\terracorder.ps1 -ResourceName "azurerm_subnet" -Summary
        ```

        For full documentation, see the [README](https://github.com/WodansSon/terraform-terracorder/blob/main/README.md).
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: TerraCorder v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          terracorder-${{ steps.version.outputs.version }}-linux.tar.gz
          terracorder-${{ steps.version.outputs.version }}-windows.zip
          scripts/terracorder.ps1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-badges:
    name: Update README Badges
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Build Status Badge
      run: |
        # This would update badges in README if needed
        echo "Build status updated in badges"
